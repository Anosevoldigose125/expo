{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/typed-routes/types.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * The main routing type for Expo Router.\n *\n * @internal:\n */\nexport namespace ExpoRouter {\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\n  export interface __routes {}\n}\n\n/**\n * The main routing type for Expo Router. Includes all available routes with strongly typed parameters.\n *\n * A Href can either be a string or an object.\n *\n * The generic will be removed in 4.0\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type Href<T = string> = ExpoRouter.__routes extends { Href: any }\n  ? ExpoRouter.__routes['Href']\n  : string | { pathname: string; params?: UnknownInputParams };\n\nexport type HrefParams<T extends string> = ExpoRouter.__routes extends {\n  HrefParams: Record<string, object>;\n}\n  ? ExpoRouter.__routes['HrefParams'][T]\n  : Record<string, UnknownInputParams>;\n\n/**\n * Routes can have known inputs (e.g query params)\n * Unlike outputs, inputs can be undefined or null\n */\nexport type UnknownInputParams = Record<\n  string,\n  string | number | undefined | null | (string | number)[]\n>;\n\n/**\n * Routes can have unknown outputs (e.g query params)\n * Unlike inputs, outputs can't be undefined or null\n */\nexport type UnknownOutputParams = Record<string, string | string[]>;\n\nexport type RouteParams<Path extends string> = HrefParams<Path>;\n\n/**\n * @deprecated Use RouteParams or StrictRouteParams instead\n */\nexport type SearchParams<T extends string = never> = RouteParams<T>;\n\nexport type RouteSegments<PathOrStringArray extends string | string[]> =\n  PathOrStringArray extends string[]\n    ? PathOrStringArray\n    : PathOrStringArray extends `/${infer PartA}`\n      ? RouteSegments<PartA>\n      : PathOrStringArray extends `${infer PartA}/${infer PartB}`\n        ? [PartA, ...RouteSegments<PartB>]\n        : [PathOrStringArray];\n"]}